[build-system]
requires = ["flit_core >=3.8,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "gowt"
dynamic = ["version", "description"]
readme = "README.rst"
requires-python = ">=3.9, <3.12"
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Console",
    "Environment :: No Input/Output (Daemon)",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: The Unlicense (Unlicense)",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Version Control :: Git",
]
dependencies = [
    "pkgcore",
    "snakeoil",
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "black",
    "flake8",
    "flake8-pyproject",
]
test = [
    "pytest",
    "coverage",
    "mypy",
    "flit",
]

[project.urls]
homepage = "https://github.com/chramb/gowt"
repository = "https://github.com/chramb/gowt.git"

[project.scripts]
gowt = "gowt.__main__:main"


[tool.mypy]
strict = true
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true

ignore_missing_imports = true
disallow_untyped_decorators = false

[tool.black]
line-length = 140

[tool.isort]
profile = "black"
add_imports = "from __future__ import annotations"
skip = "__init__.py,tests"
known_local = ["gowt"]
sections = ["FUTURE","STDLIB", "THIRDPARTY", "LOCAL"]
import_heading_stdlib = "Standard Library imports"
import_heading_thirdparty = "Third-party imports"
import_heading_local = "Local imports"
force_sort_within_sections = true
line_length = 140
lines_between_sections = 1

[tool.flake8]
max-line-length = 140

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "if __debug__:",
    "if __name__ == [\"']__main__[\"']:$",
]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["."]
omit = ["tests", "venv"]